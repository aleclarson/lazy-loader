// Generated by CoffeeScript 1.11.1
var Loader, Promise, ReactiveVar, Type, isType, type;

ReactiveVar = require("ReactiveVar");

Promise = require("Promise");

Loader = require("loader");

isType = require("isType");

Type = require("Type");

type = Type("LazyLoader");

type.inherits(Loader);

type.defineValues(function() {
  return {
    _value: ReactiveVar()
  };
});

type.defineGetters({
  value: function() {
    return this._value.get();
  },
  isLoaded: function() {
    return this._value.get() !== void 0;
  }
});

type.defineMethods({
  get: function(key) {
    var value;
    value = this._value.get();
    if (value !== void 0) {
      return value[key];
    } else {
      return null;
    }
  }
});

type.overrideMethods({
  load: function() {
    var value;
    value = this._value.get();
    if (value !== void 0) {
      return Promise(value);
    } else {
      return this.__super(arguments);
    }
  },
  __onLoad: function(value) {
    this._value.set(value);
    return value;
  },
  __onUnload: function() {
    var value;
    value = this._value.get();
    if (value && isType(value.unload, Function)) {
      value.unload();
    }
    this._value.set(void 0);
  }
});

module.exports = type.build();
